[user]
  name = Quang Do
  email = quang.do.se@gmail.com

[push]
  default = simple

[advice]
  waitingForEditor = false # don't display hint message when opening editor

[core]
  editor = emacsclient -q -u -nw 2>/dev/null
  pager = less  # `git show` invokes pager and uses editor that accepts stdin
  ignorecase = true
  autocrlf = false  # don't convert line ending
  eol = lf # always use Unix line ending
  filemode = false

[pull]
  rebase = false # merge (the default strategy)
  ff = only

[alias]
  graph = log --pretty=oneline --abbrev-commit --graph --decorate --color

  slog = log --pretty=oneline --abbrev-commit

  pulla = !git pull && git submodule update --init --recursive

  pushr = push -u origin HEAD

  pushf = push -f

  a = add

  aa = add .

  au = add -u

  aucm = !git add -u && git commit -m

  aacm = !git add . && git commit -m

  auc = !git add -u && git commit

  aac = !git add . && git commit

  blt = branch --sort=committerdate

  brt = branch --remotes --sort=committerdate
  # brt = ls-remote --heads --sort=committerdate

  c = commit

  cm = commit -m

  ch = checkout

  chb = checkout -b

  chm = checkout main

  d = diff

  dc = diff --cached

  df = diff --name-only

  dt = difftool

  f = fetch

  s = status

  conflict = diff --name-only --diff-filter=U

  conflict-check = diff --check

  # Update a local branch to match a remote branch
  bu = "!f() { git stash && git checkout -f ${1-main} && git fetch --all && git reset --hard origin/${1-main} && git checkout - && git rebase ${1-main}; }; f"

  # Update a target branch and then rebase interactively with that branch
  rbi = "!f() { git rebase -i $(git merge-base HEAD ${1-main}); }; f"

  alias = !git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

  quotes = !echo "\\\"$HOME\\\"" "$HOME"  \"$HOME\" '\"$HOME\"' '"$HOME"' '$HOME'

  # get project root directory
  pdir = rev-parse --show-toplevel

  cherry-pit = "!f() { git rebase --onto $1^ $1 HEAD; }; f"

  squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-A new start}\"); }; f"

  backup = "!f() { git stash && git checkout -b $(git symbolic-ref --short HEAD 2>/dev/null)-$(date +'%Y%m%d%H%M%S') && git checkout -; }; f"

[diff]
  tool=e

[difftool "e"]
  cmd = emacs -nw --eval \"(ediff-files \\\"$LOCAL\\\" \\\"$REMOTE\\\")\"

[difftool]
  prompt = false

[merge]
  conflictstyle=diff3

[init]
  templatedir = ~/.git-template
  defaultBranch = main

[color]
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = yellow reverse bold
  local = yellow bold
  remote = green bold

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow bold
  changed = green bold
  untracked = cyan bold