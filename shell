#!/usr/bin/env bash

set -o pipefail

trap 'catch $? $LINENO' ERR

### File & directory default permission (g-w o-rwx)
umask 0027



###--------------------------------------------------------------------------------------------------
# FUNCTIONS

catch() {
    echo "Shell init had error $1 on line $2"
}

cd_up() {
    cd $(printf "%0.s../" $(seq 1 $1 ));
}

docker-container-stop-all() {
    docker container stop $(docker container ls -qa)
}

cd_git_project() {
    pdir=$(git rev-parse --show-toplevel 2>/dev/null)

    if [ ! -z "${pdir}" ]; then
        cd "${pdir}"
    fi
}

emacsclient-read-only() {
    emacsclient -q -u -nw -e "(find-file-read-only \"$1\")" 2>/dev/null
}

emacsclient-edit() {
    emacsclient -q -u -nw "$1" 2>/dev/null
}

trash() {
    if [ ! -d "${HOME}/.trash" ]; then
        mkdir -p "${HOME}/.trash"
    fi

    mv "$@" "$HOME/.trash/"
}

gitgraph() {
    args=""
    while [ "$1" != "" ]; do
        case $1 in
            -a | --all )    args="${args} --all"
                            ;;
            * )             ;;
        esac
        shift
    done
    git log --graph --decorate --pretty=oneline --abbrev-commit ${args}
}

qcc() {
    while [ "$1" != "" ]; do
        file_name=$(basename -s .cpp "$1")

        if [ ! -e "$file_name".cpp ]; then
            printf "'%s' is not a .cpp file.\n" "$1"
        else
            printf 'Compiling %s...\n' "$1"
            g++ -std=c++14 -Wshadow -Wall -g -D_GLIBCXX_DEBUG -o "$file_name" "$file_name".cpp
        fi

        shift
    done
}

display_clock() {
    # 8 is the length of hh:mm:ss
    watch -t -p -n 0.5 'printf "%0.s\n" $( seq 1 $(( $LINES/2 )) ); printf "%*s" $(( (8 + $COLUMNS)/2 )) $(date +%T);'
}

# ubuntu only
copy() {
    if ! type xclip > /dev/null 2>&1; then # Check that xclip is installed.
        printf "You must have the 'xclip' program installed.\n"
    elif [ "$USER" == "root" ]; then # Check user is not root (root doesn't have access to user xorg server)
        printf "Must be regular user (not root) to copy a file to the clipboard.\n"
    else
        if  [ -t 0 ]; then # Check if FD 0 (standard input) is hooked up to a TTY. False if running in a pipeline
            # Fetch input from params
            input="$*"
        else # Fetch input from stdin since pipe sends it there
            input="$(< /dev/stdin)"
        fi

        if [ -z "$input" ]; then # If no input, print usage message.
            printf "Copies a string to the clipboard.\n"
            printf "Usage: copy <string>\n"
            printf "       printf <string> | copy\n"
        else
            # Copy input to clipboard
            printf -- "$input" | xclip -selection c

            # Truncate text for status
            if [ ${#input} -gt 80 ]; then
                input="$(printf -- "$input" | cut -c1-80 | head -n 5)...\n";
            fi

            # Print status.
            printf "Copied to clipboard: $input\n"
        fi
    fi
}

search-history() {
    grep -irh -B 1 "$@" "${HISTDIR}" | sed -E 's/^#([0-9]+).*$/printf "\\e[00m\\e[48;5;025;38;5;016m%s%s\\e[m" "$(date +"%F %T" -d @\1)"/e'
}

clear_and_load() {
    clear
    if [ -f "${HOME}/.bashrc" ]; then
        source "${HOME}/.bashrc"
        return 0
    fi

    if [ -f "${HOME}/.bash_profile" ]; then
        source "${HOME}/.bash_profile"
        return 0
    fi

    if [ -f "${HOME}/.profile" ]; then
        source "${HOME}/.profile"
        return 0
    fi
}



###--------------------------------------------------------------------------------------------------
# SSH SET UP

# Add ssh to keychain to avoid password prompt everytime, macOS only
# ssh-add -K "${HOME}/.ssh/id_rsa" &>/dev/null



###--------------------------------------------------------------------------------------------------
# PROMPT BACKGROUND AND FOREGROUND

prompt_color_escape() {
    # Make sure using escape \] for PS1
    printf '\[\e['$@'m\]'
    # printf '\[\033['$@'m\]' # alternative

    # To use in terminal
    # echo -e "\e[00m""\e[48;5;046m""\e[38;5;016m""\e[01m""testing""\e[m"
}

SET=$(prompt_color_escape '00')
RESET=$(prompt_color_escape '')

# 01; bold text version of that color
# 38;5;[000-255] foreground color
# 48;5;[000-255] background color
BG_RED=$(prompt_color_escape '48;5;196')
BG_GREEN=$(prompt_color_escape '48;5;046')

FG_CYAN=$(prompt_color_escape '01;38;5;075')
FG_BRIGHT_GREEN=$(prompt_color_escape '01;38;5;118')
FG_YELLOW=$(prompt_color_escape '01;38;5;226')
FG_ORANGE=$(prompt_color_escape '01;38;5;214')
FG_WHITE=$(prompt_color_escape '01;38;5;231')
FG_RED=$(prompt_color_escape '01;38;5;009')

FG_BOLD=$(prompt_color_escape '01')
FG_BOLD_RESET=$(prompt_color_escape '21')

get_git_prompt() {
    current_branch=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/)*$//' -e 's/* (*\(.*\)/\1/' -e 's/^[Hh][Ee][Aa][Dd] detached at /:/')

    # if there is no branch, don't display anything
    # quote the variable in case of string with multiple words
    # -z if the string length is zero
    if [ -z "${current_branch}" ]; then
        return 0
    fi

    remote_tracking_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null);

    if [ ! -z "${remote_tracking_branch}" ]; then
        read ahead behind <<< $(git rev-list --left-right --count ${current_branch}...${remote_tracking_branch} 2>/dev/null)

        if [ ! -z ${ahead} ] && [ ${ahead} -gt 0 ]; then
            current_branch=${current_branch}' ↑'${ahead}
        fi

        if [ ! -z ${behind} ] && [ ${behind} -gt 0 ]; then
            current_branch=${current_branch}' ↓'${behind}
        fi
    fi

    git_status_count=$(git status -s 2>/dev/null | wc -l | tr -d ' ')

    git_stash_count=$(git stash list 2>/dev/null | wc -l | tr -d ' ')

    git_conflict_count=$(git diff --name-only --diff-filter=U 2>/dev/null | wc -l | tr -d ' ')

    if [ ${git_status_count} -eq 0 ]; then
        git_status_count=${FG_BRIGHT_GREEN}'✔' # ✔✓
    else
        git_status_count='▲'${git_status_count}
    fi

    if [ ${git_stash_count} -eq 0 ]; then
        git_stash_count=''
    else
        git_stash_count='⚑'${git_stash_count}
    fi

    if [ ${git_conflict_count} -eq 0 ]; then
        git_conflict_count=''
    else
        git_conflict_count=${FG_RED}'✗'${git_conflict_count}
    fi

    # squeeze spaces into single space | then remove all trailing spaces
    printf " (${current_branch}) ${git_status_count} ${git_stash_count} ${git_conflict_count}" | tr -s " " | sed -e 's/[[:space:]]*$//'
}

get_vpn_prompt() {
    is_vpn=$(pgrep -x openconnect)

    if [ $? -eq 0 ]; then
        printf ' (VPN)'
    fi
}

set_bash_prompt() {
    PS1="${SET}${FG_WHITE}${BG_RED}\u$(get_vpn_prompt)${RESET}${FG_CYAN} \A${FG_BRIGHT_GREEN} \w${FG_YELLOW}$(get_git_prompt)${RESET}\n${FG_CYAN}\$${RESET} "
}



###--------------------------------------------------------------------------------------------------
# EXPORT VARS

# run emacs in daemon mode inside terminal
export ALTERNATE_EDITOR=""
export EDITOR='emacs -nw'

# BASH HISTORY CONFIGS

if [ ! -d "${HOME}/.bash_history.d" ]; then
    mkdir -p "${HOME}/.bash_history.d"
fi

# Don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth:erasedups

# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
export HISTDIR="${HOME}/.bash_history.d"

# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE="${HISTDIR}/$(date +"%Y%m")"

shopt -s histappend

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
if ! grep -q 'history -a' <<< "${PROMPT_COMMAND}"; then
    PROMPT_COMMAND="history -a; ${PROMPT_COMMAND}"
fi

# Note: append to PROMPT_COMMAND to keep default prompt behavior
# use PROMPT_COMMAND to be able to eload the whole PS1 and refresh prompt color correctly
if ! grep -q 'set_bash_prompt' <<< "${PROMPT_COMMAND}"; then
    PROMPT_COMMAND="set_bash_prompt; ${PROMPT_COMMAND}"
fi

if ! grep -q "${HOME}/bin" <<< "${PATH}"; then
    export PATH="${HOME}/bin:${PATH}"
fi

if [ -d "${HOME}/.local/bin" ] && ! grep -q "${HOME}/.local/bin" <<< "${PATH}"; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi


export NPM_CONFIG_PREFIX="${HOME}/.npm-global"
export N_PREFIX="${HOME}/.n"

if [ ! -d "${NPM_CONFIG_PREFIX}" ]; then
    mkdir -p "${NPM_CONFIG_PREFIX}"
fi

if [ ! -d "${N_PREFIX}" ]; then
    mkdir -p "${N_PREFIX}"
fi

if ! grep -q "${NPM_CONFIG_PREFIX}" <<< "${PATH}"; then
    export PATH="${NPM_CONFIG_PREFIX}/bin:${PATH}"
fi

if ! grep -q "${N_PREFIX}" <<< "${PATH}"; then
    export PATH="${N_PREFIX}/bin:${PATH}"
fi



###--------------------------------------------------------------------------------------------------
# ALIAS

alias watch="watch "
alias rm="rm -i"
alias rmd="rm -rfi"
alias emacs="emacs -nw"
alias ek="emacsclient -e '(kill-emacs)'"
alias ev="emacsclient-read-only"
alias em="emacsclient-edit"
alias grepl="grep --exclude-dir={vendor,node_modules,storage,public} --exclude=\*.{lock,git,scss}"
alias d="docker"
alias dc="docker-compose"
alias dce="docker-compose exec"
alias d-stop-all="docker-container-stop-all"
alias c="clear"
alias cl="clear_and_load"
alias all-functions="compgen -c"
alias cdg="cd_git_project"
alias 'cd..'='cd_up'
alias g="git"
alias lst="tree -a -I '.git' --charset=ascii"
alias clock="display_clock"
alias paste="xclip -selection clipboard -o" # ubuntu only
alias timestamp='date +"%Y%m%d%H%M%S"'



###--------------------------------------------------------------------------------------------------
# MISC - sourcing and options

# map git completion to 'g'
if [ -f "/etc/bash_completion.d/git" ]; then
    source "/etc/bash_completion.d/git" 2>/dev/null
fi

if [ -f "/usr/share/bash-completion/completions/git" ]; then
    source "/usr/share/bash-completion/completions/git" 2>/dev/null
fi

# This may change. Use `complete | grep -i git` or `compgen -c | grep -i git` to check
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main g 2>/dev/null # linux

# Bash 4+ specific
# Enable recursive glob, e.g. ls **/*.py
shopt -s globstar 2>/dev/null
shopt -s extglob



# Reset trap, don't catch subsequent errors. This is because 'source' can have side effect and make trap avaiable to current shell
trap '' ERR
trap - ERR

[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh" # macOS git completion
